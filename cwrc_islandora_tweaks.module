<?php

/**
 * @file
 * Hooks and helper functions for the CWRC Islandora Tweaks module.
 */

/* Constants. */

/**
 * The query fragment used to change how a basic collection is sorted.
 *
 * Extracting this to a constant makes changing the sorting query fragment
 * relatively easy if we discover that it collides with something else.
 */
define('CWRC_ISLANDORA_TWEAKS_SORT_FRAGMENT', 'sort');

/* Hooks. */

/**
 * Implements hook_menu().
 */
function cwrc_islandora_tweaks_menu() {
  $items = [];
  $items['islandora/basic_collection/find_collections_user'] = array(
    'title' => 'Autocomplete Collection Search for Users',
    'page callback' => 'cwrc_islandora_tweaks_get_collections_filtered',
    'type' => MENU_CALLBACK,
    'file' => 'includes/utilities.inc',
    'access arguments' => array(ISLANDORA_BASIC_COLLECTION_MIGRATE_COLLECTION_MEMBERS),
  );
  $items['islandora/object/%islandora_object/share/user'] = array(
    'title' => 'Share with another user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cwrc_islandora_tweaks_user_share', 2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_object_manage_access_callback',
    'access arguments' => array(
      array(
        ISLANDORA_MANAGE_PROPERTIES,
        ISLANDORA_METADATA_EDIT,
        ISLANDORA_ADD_DS,
        ISLANDORA_PURGE,
        ISLANDORA_INGEST,
      ), 2,
    ),
    'weight' => 4,
  );
  return $items;
}

/**
 * Implements hook_islandora_basic_collection_query_param_alter().
 */
function cwrc_islandora_tweaks_islandora_basic_collection_query_param_alter(&$query_filters, &$query_statements, &$params, &$query_optionals) {
  // Parse the URL to see if there is a sort parameter. Default to sorting by
  // title if the value of the parameter is not something else we recognize.
  if (isset($_GET[CWRC_ISLANDORA_TWEAKS_SORT_FRAGMENT])) {
    if ($_GET[CWRC_ISLANDORA_TWEAKS_SORT_FRAGMENT] === 'date_modified') {
      $params['order_by'] = '?date_modified';
    }
    else {
      $params['order_by'] = '?title';
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function cwrc_islandora_tweaks_module_implements_alter(&$implementations, $hook) {
  // Moves our implementations to the end of the run-list.
  static $hooks = array(
    'islandora_collectionCModel_islandora_object_ingested',
    'islandora_ap_audioCModel_islandora_object_ingested',
    'form_islandora_basic_collection_create_child_collection_form_alter',
  );
  if (in_array($hook, $hooks)) {
    $group = $implementations['cwrc_islandora_tweaks'];
    unset($implementations['cwrc_islandora_tweaks']);
    $implementations['cwrc_islandora_tweaks'] = $group;
  }
}

/**
 * Implements hook_page_alter().
 */
function cwrc_islandora_tweaks_page_alter(&$page) {
  module_load_include('inc', 'islandora_object_lock', 'includes/utilities');

  $object = menu_get_object('islandora_object', 2);
  if (!$object) {
    return;
  }

  if (arg(3) != "manage") {
    return;
  }

  if (!islandora_object_lock_is_locked($object)) {
    return;
  }

  $msg = islandora_object_lock_get_locked_message($object);

  if (!_cwrc_islandora_tweaks_message_exists($msg)) {
    drupal_set_message($msg, 'warning', FALSE);
  }

}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function cwrc_islandora_tweaks_islandora_collectioncmodel_islandora_object_ingested(AbstractObject $object) {
  // The cmodel-specific implementations are fired last, so we need to implement
  // the same hook to block the default TN datastream here.
  cwrc_islandora_tweaks_islandora_object_ingested($object);
}

/**
 * Implements hook_CMODEL_PID_islandora_object_ingested().
 */
function cwrc_islandora_tweaks_islandora_sp_audiocmodel_islandora_object_ingested(AbstractObject $object) {
  // The cmodel-specific implementations are fired last, so we need to implement
  // the same hook to block the default TN datastream here.
  cwrc_islandora_tweaks_islandora_object_ingested($object);
}

/* Form handlers. */

/**
 * Form builder function for sort order form on basic collections.
 *
 * @see cwrc_islandora_tweaks_sort_form_submit()
 */
function cwrc_islandora_tweaks_sort_form($form, &$form_state) {
  return array(
    'sort' => array(
      '#type' => 'select',
      '#title' => t('Sort by'),
      '#options' => array(
        'title' => t('Title'),
        'date_modified' => t('Modified'),
      ),
      '#default_value' => (isset($_GET[CWRC_ISLANDORA_TWEAKS_SORT_FRAGMENT]) ? $_GET[CWRC_ISLANDORA_TWEAKS_SORT_FRAGMENT] : 'title'),
    ),
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Change'),
    ),
  );
}

/**
 * Form submission handler for cwrc_islandora_tweaks_sort_form().
 */
function cwrc_islandora_tweaks_sort_form_submit($form, &$form_state) {
  // Simply performs a redirect to the same page with the appropriate sort
  // parameter. For use in sort order forms.
  $path = current_path();
  $query = drupal_get_query_parameters();
  $query['sort'] = $form_state['values']['sort'];
  drupal_goto($path, array('query' => $query));
}

/**
 * Implements hook__islandora_object_lock_ignored_datastream_modifications().
 *
 * Blocks the CWRC datastream from unlocking an object.
 */
function cwrc_islandora_tweaks_islandora_object_lock_ignored_datastream_modifications(AbstractDatastream $datastream) {
  return array(
    'CWRC',
  );
}

/**
 * Implements hook_form_alter().
 */
function cwrc_islandora_tweaks_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'islandora_workflow_rest_cwrc_workflow_management_form') {
    foreach ($form['logged_events']['#options'] as &$option) {
      $option['object'] = str_replace('/workflow', '/view/history', $option['object']);
    }
  }

  /* Break this into its own function */
  if ($form_id == 'islandora_ingest_form') {
    global $base_url;
    $path_info = explode('/', current_path());
    $path = '/' . $path_info[0] . '/' . $path_info[1] . '/' . $path_info[2] . '/';

    $form['cancel'] = array(
      '#type' => 'button',
      '#value' => t('Cancel'),
      '#weight' => 19,
      '#attributes' => array('onClick' => 'window.location= "' . $base_url . $path . '"; event.preventDefault();'),
    );
  }

  /* Break these next 3 ifs into its own function */
  if ($form_id == 'islandora_basic_collection_select_content_model_form') {
    $form['models']['#title'] = t('Select the type of item (Content Model) to add');
    asort($form['models']['#options']);
    foreach ($form['models']['#options'] as $key => &$value) {
      $value = str_replace(array('CModel', 'Content Model'), '', $value);
    }
  }
  if ($form_id == 'islandora_basic_collection_share_children_form'
    || $form_id == 'islandora_basic_collection_migrate_children_form') {
    $form['collection']['#required'] = 1;
    $form['collection']['#empty_option'] = '- '. t('Choose a Collection') . ' -';

    // Iterate over pre-populated options.
    foreach ($form['collection']['#options'] as $pid => $label) {
      // Load the object and get the parent pids.
      $object = islandora_object_load($pid);
      $parent_pids = islandora_basic_collection_get_parent_pids($object);

      // Build an array of parent labels.
      $parent_labels = array();
      foreach ($parent_pids as $parent_pid) {
        $parent = islandora_object_load($parent_pid);
        $parent_labels[] = $parent->label;
      }

      // Change the option label to new format.
      $form['collection']['#options'][$pid] = t('@label [@parents] (@pid)', array(
        '@label' => $label,
        '@parents' =>  implode(', ', $parent_labels),
        '@pid' => $pid,
      ));
    }
  }
  if ($form_id == 'islandora_basic_collection_share_item_form'
    || $form_id == 'islandora_basic_collection_migrate_item_form') {
    $form['new_collection_name']['#autocomplete_path'] = 'islandora/basic_collection/find_collections_user';
  }

  if ($form_id == 'xml_form_builder_datastream_form') {
    list($object, $dsid) = $form_state['build_info']['args'];
    if ($dsid == 'MODS') {
      $form['cancel'] = array(
        '#type' => 'button',
        '#value' => t('Cancel'),
        '#submit' => array('cwrc_islandora_tweaks_mods_cancel'),
        '#limit_validation_errors' => array(),
        '#executes_submit_callback' => TRUE,
      );
    }
  }

  /* Break this into its own function */
  if ($form_id == "islandora_bookmark_detailed_form") {
    $form['bookmarks']['users']['listusers']['#chosen'] = TRUE;
    foreach ($form['bookmarks']['users']['listusers']['#options'] as $uid => $value) {
      if (empty($uid)) {
        continue;
      }
      if ($uid > 0) {
        $user = user_load($uid);
        if ($user) {
          $realname = $user->realname;
          if (empty($realname)) {
            $realname = $user->name;
          }
          $form['bookmarks']['users']['listusers']['#options'][$uid] = $realname;
        }
      }
    }

    $form['bookmarks']['users']['listusers']['#options'][0] = t('Everyone');
  }

  return $form;
}

/**
 * Form cancellation submit handler.
 */
function cwrc_islandora_tweaks_mods_cancel($form, &$form_state) {
  list($object, $dsid) = $form_state['build_info']['args'];
  $form_state['redirect'] = 'islandora/object/' . $object->id;
  islandora_object_lock_remove_object_lock($object->id);
  drupal_set_message(t('Lock removed, datastream "@dsid" was not modified.', array('@dsid' => $dsid)));
}

/**
 * Implements hook_form_islandora_basic_collection_create_child_collection_form_alter().
 */
function cwrc_islandora_tweaks_form_islandora_basic_collection_create_child_collection_form_alter(&$form, &$form_state) {
  $label = $form_state['build_info']['args'][0]['collection']->label;
  drupal_set_title('Creating a collection within "' . $label . '"');
  $form['pid']['#title'] = t('Permanent Identifier (PID) for the new Collection: (optional)');
  $form['pid']['#description'] = t('<p>A PID is a namespace plus a unique identifier, formatted as "namespace:collectionIdentifier".</p>
<p>The namespace prefix identifies a project and/or collection (e.g. cwrc).</p>
<p>The namespace is inherited by all the descendants of the collection. Do not change the namespace within a PID unless you are working on a project with an established one (e.g. digitalpage:), which is usually a multisite project. If your project has a custom namespace, collections should inherit them.</p>
<p>(The current namespace is visible in the address bar of your browser, which will show ...islandora/object/namespace%3AcollectionIdentifier/manage/overview/ingest)</p>
<p>You may provide your own (human-readable) unique identifier for a collection. For example: "cwrc:AtlanticPoetry" or "digitalpage:brazilian".</p>
<p>Do not use spaces or special characters.</p>');

  $form['xacml']['#description'] = t('<p>Collection policies govern the types of content a collection can contain and who can see and modify a collection.</p>
<p>The default policy permits public viewing but restricts modification to those with editing rights for the project. If you have set different policies for the parent collection, you can choose to have this sub-collection inherit those policies.</p>
<p>If in doubt, leave settings as they are.</p>');
}

/* Theme functions. */

/**
 * Prepares variables for Islandora basic collection templates.
 *
 * Default template: islandora-basic-collection.tpl.php.
 *
 * @param array $variables
 *   An associative array containing:
 *   - islandora_object: A PHP object containing information about the Fedora
 *     data object that is this collection.
 *   - collection_results: An array of Fedora data object stubs that are in this
 *     collection.
 */
function cwrc_islandora_tweaks_preprocess_islandora_basic_collection(&$variables) {
  // Loop through each object in the collection, find it's URL, and add a Read
  // More link.
  $results = $variables['collection_results'];
  $display = (empty($_GET['display'])) ? variable_get('islandora_basic_collection_default_view', 'grid') : $_GET['display'];
  $build = array(
    '#theme' => 'item_list',
    '#type' => 'ul',
    '#items' => array(),
    '#attributes' => array(),
  );

  // Use default grid layout.
  if ($display == 'grid') {
    $build['#attributes']['class'][] = 'grid-layout';
    foreach ($results as $result) {
      $content = array(
        '#theme' => 'cwrc_search_teaser_grid',
        '#object' => $result['object']['value'],
      );
      $build['#items'][] = render($content);
    }

    // Use default list layout.
  }
  else {
    $build['#attributes']['class'][] = 'list-layout';
    foreach ($results as $result) {
      $content = array(
        '#theme' => 'cwrc_search_teaser_list',
        '#object' => $result['object']['value'],
      );
      $build['#items'][] = render($content);
    }
  }

  $variables['collection_results'] = $build;

  $variables['order_by'] = array(
    '#type' => 'fieldset',
    '#title' => t('Sort'),
  );
  $variables['order_by']['sort_options'] = drupal_get_form('cwrc_islandora_tweaks_sort_form');
}

/**
 * Prepares variables for html templates.
 *
 * Default template: html.tpl.php.
 *
 * @param array $variables
 *   An associative array containing:
 *   - classes_array: An array of classes for the HTML page's body tag.
 */
function cwrc_islandora_tweaks_preprocess_html(&$variables) {
  $menu_item = menu_get_item();
  if ($menu_item['path'] == 'islandora/object/%/print') {
    $variables['classes_array'][] = 'islandora-print';
  }
}

/**
 * Prepares variables for Islandora basic collection templates, grid view.
 *
 * Default template: islandora-basic-collection-grid.tpl.php.
 *
 * @param array $variables
 *   An associative array containing:
 *   - islandora_object: A PHP object containing information about the Fedora
 *     data object that is this collection.
 *   - collection_results: An array of Fedora data object stubs that are in this
 *     collection.
 */
function cwrc_islandora_tweaks_preprocess_islandora_basic_collection_grid(&$variables) {
  cwrc_islandora_tweaks_preprocess_islandora_basic_collection($variables);
}

/* Helper functions. */

/**
 * Gets a path out of a URL.
 *
 * Essentially a wrapper around parse_url() with a Drupal-specific failure
 * state.
 *
 * @param string $uri
 *   The URL to parse.
 *
 * @return string
 *   The path from the URL, or '<front>' if the URL was too mangled to parse.
 */
function _cwrc_islandora_tweaks_parse_path($uri) {
  $parsed_uri = parse_url($uri);

  // If the URL was so badly mangled that PHP couldn't parse it, or we couldn't
  // find the path fragement, return the URL to the homepage of the site.
  if ($parsed_uri === FALSE || !isset($parsed_uri['path'])) {
    return '<front>';
  }

  return ltrim($parsed_uri['path'], '/');
}

/**
 * Get an array of query parameters out of a URL.
 *
 * Essentially a wrapper around parse_url() with some extra functionality to
 * put the query parameters into an array.
 *
 * @param string $uri
 *   The URL to parse.
 *
 * @return array
 *   An array of query parameters from the URL, or an empty array the URL was
 *   too mangled to parse or query parameters could not be found in a parsable
 *   URL.
 */
function _cwrc_islandora_tweaks_parse_query($uri) {
  $answer = array();
  $parsed_uri = parse_url($uri);

  // If the URL was so badly mangled that PHP couldn't parse it, or we couldn't
  // find the query fragement, return an empty array of query parameters.
  if ($parsed_uri === FALSE || !isset($parsed_uri['query'])) {
    return array();
  }

  // Technically, according to RFC 1866, the semicolon (;) is a valid way to
  // separate parameters, but it's not widely used in Drupal, so we'll ignore
  // it for simplicity's sake.
  $query_variables = explode('&', $parsed_uri['query']);

  // Reconstruct an array of query parameters by deconstructing the string we
  // got back from parse_url().
  foreach ($query_variables as $variable) {
    $var_parts = explode('=', $variable, 2);
    $key = $var_parts[0];
    $value = $var_parts[1];
    $answer[$key] = $value;
  }

  return $answer;
}

/**
 * A helper function to determine if a message has already been queued.
 *
 * @param string $msg
 *   The message to check.
 *
 * @return bool
 *   TRUE if the message has been queued for display; FALSE otherwise.
 */
function _cwrc_islandora_tweaks_message_exists($msg) {
  $messages = drupal_get_messages(NULL, FALSE);
  foreach ($messages as $msgs) {
    if (in_array($msg, $msgs)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Blocks default TN datastreams for various cmodels when they are ingested.
 */
function cwrc_islandora_tweaks_islandora_object_ingested(AbstractObject $object) {
  static $cmodels = array(
    'islandora:sp-audioCModel',
    'islandora:collectionCModel',
  );

  // This hook is probably fired twice, try not to do too much work.
  if (in_array(_cwrc_islandora_tweaks_extract_cmodel($object->models), $cmodels)
    && isset($object['TN'])) {

    // Check the defaults for specified cmodels.
    switch (_cwrc_islandora_tweaks_extract_cmodel($object->models)) {
      case 'islandora:sp-audioCModel':
        $default_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'islandora_audio') . '/images/audio-TN.jpg';
        break;

      case 'islandora:collectionCModel':
        $default_path = DRUPAL_ROOT . '/' . drupal_get_path('module', 'islandora_basic_collection') . '/images/folder.png';
        break;
    }

    // Hash the default and the ingested thumbnail.
    $default = md5_file($default_path);
    $thumbnail = md5($object['TN']->content);

    // This is the default.
    if ($default == $thumbnail) {
      $object->purgeDatastream('TN');
    }
  }
}

/**
 * Helper function that extracts a single valid cmodel from a passed array.
 *
 * Primarily used to filter out `fedora-system` namespace cmodels (because we
 * just don't care about those ones).
 *
 * @param array $models
 *   An array of cmodel PIDs.
 *
 * @return string
 *   A single cmodel PID.
 */
function _cwrc_islandora_tweaks_extract_cmodel($models) {
  foreach ($models as $key => $value) {
    if (substr($value, 0, 13) == 'fedora-system') {
      unset($models[$key]);
    }
  }

  // This definitely isn't bullet-proof.
  $return = reset($models);
  return $return;
}

/**
 * Implements hook_form_FORM_ID_alter() for islandora_basic_collection_share_item_form().
 */
function cwrc_islandora_tweaks_form_islandora_basic_collection_share_item_form_alter(&$form, &$form_state, $form_id) {
  // Push on a submit handler.
  $form['#submit'][] = 'cwrc_islandora_tweaks_share_form_submit';

  // Add the update permissions checkbox.
  $form['update_permissions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Update permissions?'),
    '#description' => t('Checking this box will attempt to merge the XACML permissions on this object with the XACML permissions at the destination.'),
    '#default_value' => TRUE,
  );

  // Additional permissions fieldset, will fill momentarily.
  $form['additional_permissions'] = array(
    '#tree' => TRUE,
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Additional Permissions'),
    '#description' => t('Here you can apply additional permissions to your object, note that permissions may only be <strong>GRANTED</strong> from this form, please use the XACML editor for more options.'),
    'view_permissions' => array(
      '#type' => 'fieldset',
      '#title' => t('View permissions'),
    ),
    'manage_permissions' => array(
      '#type' => 'fieldset',
      '#title' => t('Manage permissions'),
    ),
  );

  // Get group options available to this user.
  $group_options = _cwrc_xacml_get_group_options();

  // Create group widget.
  $group_widget = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#chosen' => TRUE,
    '#options' => $group_options,
    '#title' => t('Group access'),
  );

  $form['additional_permissions']['view_permissions']['group'] = $group_widget;
  $form['additional_permissions']['manage_permissions']['group'] = $group_widget;

  // Get a list of users.
  $user_options = drupal_map_assoc(array_keys(db_query('SELECT u.name FROM users u WHERE u.status = 1')->fetchAllAssoc('name')));
  _cwrc_xacml_replace_usernames($user_options);

  // Create user widget.
  $user_widget = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#chosen' => TRUE,
    '#options' => $user_options,
    '#title' => t('User access'),
  );

  $form['additional_permissions']['view_permissions']['user'] = $user_widget;
  $form['additional_permissions']['manage_permissions']['user'] = $user_widget;

  // Get a list of roles.
  $role_options = drupal_map_assoc(array_keys(db_query('SELECT r.name FROM role r')->fetchAllAssoc('name')));
  _og_global_roles_filter_select($role_options);

  // Create role widget.
  $role_widget = array(
    '#type' => 'select',
    '#multiple' => TRUE,
    '#chosen' => TRUE,
    '#options' => $role_options,
    '#title' => t('Role access'),
  );

  $form['additional_permissions']['view_permissions']['role'] = $role_widget;
  $form['additional_permissions']['manage_permissions']['role'] = $role_widget;
}

/**
 * Submit handler for share form.
 */
function cwrc_islandora_tweaks_share_form_submit($form, &$form_state) {
  // Get object and form values.
  $object = $form_state['build_info']['args'][0];
  $xacml = new IslandoraXacml($object);
  $values = $form_state['values'];

  // If the update permissions checkbox is checked get destination XACML.
  if ($values['update_permissions'] == 1) {
    // Load desination collection and XACML rules.
    $destination = islandora_object_load($values['new_collection_name']);
    $xacml_destination = new IslandoraXacml($destination);

    // Apply all destination rules to this object.
    foreach ($xacml_destination->viewingRule->getUsers() as $user) {
      $xacml->viewingRule->addUser($user);
    }
    foreach ($xacml_destination->viewingRule->getRoles() as $role) {
      $xacml->viewingRule->addRole($role);
    }
    foreach ($xacml_destination->managementRule->getUsers() as $user) {
      $xacml->managementRule->addUser($user);
    }
    foreach ($xacml_destination->managementRule->getRoles() as $role) {
      $xacml->managementRule->addRole($role);
    }
  }

  // Merge group and role permissions (OG global roles will take over).
  $view_users = $values['additional_permissions']['view_permissions']['user'];
  $view_roles = array_merge(
    $values['additional_permissions']['view_permissions']['group'],
    $values['additional_permissions']['view_permissions']['role']
  );
  $manage_users = $values['additional_permissions']['manage_permissions']['user'];
  $manage_roles = array_merge(
    $values['additional_permissions']['manage_permissions']['group'],
    $values['additional_permissions']['manage_permissions']['role']
  );

  // Grant view permissions to users.
  foreach ($view_users as $user) {
    $xacml->viewingRule->addUser($user);
  }

  // Grant view permission to roles.
  foreach ($view_roles as $role) {
    $xacml->viewingRule->addRole($role);
  }

  // Grant manage permissions to users.
  foreach ($manage_users as $user) {
    $xacml->managementRule->addUser($user);
  }

  // Grant manage permission to roles.
  foreach ($manage_roles as $role) {
    $xacml->managementRule->addRole($role);
  }

  // Write XACML back to fedora.
  $xacml->writeBackToFedora();
}

/**
 * Form builder callback for sharing object with a user.
 */
function cwrc_islandora_tweaks_user_share($form, &$form_state, $object) {
  $form = array();
  $form['user'] = array(
    '#autocomplete_path' => 'user/autocomplete',
    '#type' => 'textfield',
    '#title' => t('User'),
    '#description' => t('The user to share the object with.'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Share'),
  );
  return $form;
}

/**
 * Form validation callback.
 */
function cwrc_islandora_tweaks_user_share_validate($form, &$form_state) {
  if (FALSE == user_load_by_name($form_state['values']['user'])) {
    form_set_error('user', t('Username invalid or not found.'));
  }
}

/**
 * Form submit handler.
 */
function cwrc_islandora_tweaks_user_share_submit($form, &$form_state) {
  global $user;

  // Get object and add XACML rule.
  $object = $form_state['build_info']['args'][0];
  $xacml = new IslandoraXacml($object);
  $xacml->viewingRule->addUser($form_state['values']['user']);
  $xacml->writeBackToFedora();

  // Send user a PM with details.
  $recipient = user_load_by_name($form_state['values']['user']);
  privatemsg_new_thread(
    array($recipient),
    t('@author shared "@object" with you!', array('@author' => realname_load($user), '@object' => $object->label)),
    t('You can view the object by <a href="@link">clicking here</a>.', array('@link' => url('islandora/object/' . $object->id)))
  );

  drupal_set_message(t('"@object" shared with @recipient.', array('@object' => $object->label, '@recipient' => realname_load($recipient))));
}
